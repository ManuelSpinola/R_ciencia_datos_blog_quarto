---
title: "Análisis del hábitat del Vampiro (Desmodus rotundus) en Costa Rica"
description: |
  Mapa probabilístico del hábitat idóneo para el vampiro (Desmodus rotundus) en Costa Rica
author:
  - name: Manuel Spínola
    url: http://www.icomvis.una.ac.cr/index.php/manuel
    affiliation: ICOMVIS - UNA
    affiliation_url: http://www.icomvis.una.ac.cr/
    orcid: 0000-0002-7839-1908
date: 03/20/2021
citation: true
draft: true
categories:
  - "Distribución de especies"
  - "Análisis del hábitat"
  - "Ecología del paisaje"
  - "Análisis espacial"
---

```{r, message=FALSE, warning=FALSE, include=FALSE}
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(rio)
library(here)
library(glue)
library(magick)
library(sf)
library(stars)
library(rgdal)
library(raster)
library(rasterVis)
library(dismo)
library(rgeoboundaries)
library(mapview)
library(spocc)
library(scrubr)
library(rgbif)
library(rinat)
library(rvertnet)
library(mapr)
library(maps)
library(cowplot)
library(knitr)
library(geostatsp)
library(GADMTools)
library(landmap)
library(rgdal)
library(geoR)
library(plotKML)
library(raster)
library(glmnet)
library(xgboost)
library(kernlab)
library(deepnet)
library(forestError)
library(deepnet)
library(CAST)
library(embarcadero)
library(SDMtune)
library(ranger)
library(randomForest)
library(caret)
library(MLeval)
library(patchwork)
library(ranger)
library(spatialEco)
library(ecospat)
library(rfUtilities)
library(ENMeval)
library(ENMTools)
library(PointedSDMs)
library(zeallot)
library(blockCV)
library(maxnet)
library(paradox)
library(mlr3spatiotempcv)
```

### El vampiro (Desmodus rotundus)

```{r}
#| echo: false
#| eval: false
p1 <- ggdraw() + draw_image("ovs_imagenes/desmodus_rotundus_500px.jpg")
p1
```

```{r}
#| include: false
#| eval: false
grilla_cr_5367_1km <- st_read("ovs_grillas/grilla_cr_5367_1km.gpkg")
```

```{r}
#| include: false
#| eval: false
grilla_cr_5367_1km <- st_as_sf(grilla_cr_5367_1km)
```

```{r}
#| include: false
#| eval: false
grilla_cr_5367_8km <- st_read("ovs_grillas/grilla_cr_5367_8km.gpkg")
```

```{r}
#| include: false
#| eval: false
grilla_cr_5367_8km <- st_as_sf(grilla_cr_5367_8km)
```

```{r}
#| include: false
#| eval: false
cr_gadm <- gadm_sf_loadCountries("CRI", level=0, basefile="./")
cr_gadm <- st_as_sf(cr_gadm$sf)
```

```{r}
#| include: false
#| eval: false
cr_gadm_5367 <- st_transform(cr_gadm, crs = 5367)
```

```{r}
#| include: false
#| eval: false
bio <- getData("worldclim", var = "bio", res = 0.5, lon = - 83.7, lat = 9.7)
```

```{r}
#| include: false
#| eval: false
alt <- getData("worldclim", var = "alt", res = 0.5, lon = - 83.7, lat = 9.7)
```

```{r}
#| include: false
#| eval: false
bio_c <- crop(bio, cr_gadm)
```

```{r}
#| include: false
#| eval: false
alt_c <- crop(alt, cr_gadm)
```

```{r}
#| include: false
#| eval: false
bio_cr <- mask(bio_c, cr_gadm)
```

```{r}
#| include: false
#| eval: false
alt_cr <- mask(alt_c, cr_gadm)
```

```{r}
#| include: false
#| eval: false
bio_cr <- stack(bio_cr, alt_cr)
```

```{r}
#| include: false
#| eval: false
bio_cr_5367 <- projectRaster(bio_cr, crs = 5367)
```

```{r}
#| include: false
#| eval: false
gplot(bio_cr_5367$bio1_23) +
  theme_minimal() +
  geom_tile(aes(fill = value)) +
  scale_fill_viridis_c(na.value = "transparent") +
  coord_equal()
```

```{r}
#| include: false
#| eval: false
# búsqueda en gbif y inat
dr <- occ(query = "Desmodus rotundus", from = "gbif", has_coords = TRUE, limit = 10000, gbifopts = list(country = "CR"))
```

```{r}
#| include: false
#| eval: false
to <- occ(query = "Eira barbara", from = "gbif", has_coords = TRUE, limit = 10000, gbifopts = list(country = "CR"))
```

```{r, include=FALSE}
#| include: false
#| eval: false
to
```

```{r}
#| include: false
#| eval: false
saveRDS(to, "to.rds")
```

```{r}
#| include: false
#| eval: false
to_df <- occ2df(to)
```

```{r}
#| include: false
#| eval: false
to_df <- drop_na(to_df)
```

```{r}
#| include: false
#| eval: false
to_df <- to_df %>% dedup()
```

```{r}
#| include: false
#| eval: false
to_df_sf <- st_as_sf(to_df, coords = c("longitude", "latitude"), crs = 4326)
```

```{r}
#| include: false
#| eval: false
to_df_sf
```

```{r}
#| include: false
#| eval: false
to_df_sf_5367 <- st_transform(to_df_sf, crs = 5367)
```

```{r}
#| include: false
#| eval: false
to_cr_sf_5367 <- st_intersection(to_df_sf_5367, cr_gadm_5367)
```

```{r}
#| include: false
#| eval: false
ggplot() +
  theme_minimal() +
  geom_sf(data = cr_gadm_5367, aes(fill = GID_0), fill = "steelblue") +
  geom_sf(data = to_cr_sf_5367, pch = 21, fill = "orange") +
  coord_sf(datum = sf::st_crs(5367))
```

Figura 1. Registros del vampiro (Desmodus rotundus) en Costa Rica.

```{r}
#| include: false
#| eval: false
mapview(cr_gadm_5367) + mapview(to_cr_sf_5367, cex = 2, color = "red", col.regions = "orange")
```

Figura 1. Registros del vampiro (Desmodus rotundus) en GBIF para Costa Rica.

```{r}
#| include: false
#| eval: false
to_cr_celdas <- grilla_cr_5367_8km[to_cr_sf_5367, ]
```

```{r}
#| include: false
#| eval: false
ggplot() +
  theme_minimal() +
  geom_sf(data = cr_gadm_5367, aes(fill = GID_0), fill = "white") +
  geom_sf(data = grilla_cr_5367_8km, fill = "white", alpha = 0.4) +
  geom_sf(data = to_cr_celdas, fill = "red")
```

```{r}
#| include: false
#| eval: false
p_sf <- to_cr_sf_5367
```

```{r}
#| include: false
#| eval: false
p_sf$pa <- 1
```

```{r}
#| include: false
#| eval: false
p_sp <- as(p_sf, "Spatial")
```

```{r}
#| include: false
#| eval: false
p_sp
```

```{r}
#| include: false
#| eval: false
# localizaciones de background (pseudo-absences)
rp <- randomPoints(bio_cr_5367$bio1_23, 5000, p = p_sp, excludep = TRUE)
```

```{r}
#| include: false
#| eval: false
plot(bio_cr_5367$bio1_23)
points(rp)
```

```{r}
#| include: false
#| eval: false
rp_df <- as.data.frame(rp)
```

```{r}
#| include: false
#| eval: false
rp_df
```

```{r}
#| include: false
#| eval: false
rp_df$pa <- 0
```

```{r}
#| include: false
#| eval: false
rp_df
```

```{r}
#| include: false
#| eval: false
rp_sf <- st_as_sf(rp_df, coords = c("x", "y"))
```

```{r}
#| include: false
#| eval: false
pa_sf <- bind_rows(p_sf, rp_sf)
```

```{r}
#| include: false
#| eval: false
pa_sp <- as(pa_sf, "Spatial")
```

```{r}
#| include: false
#| eval: false
occ_df <- raster::extract(bio_cr_5367, pa_sp, df = TRUE)
```

```{r}
#| include: false
#| eval: false
occ_df
```

```{r}
#| include: false
#| eval: false
occ_df <- bind_cols(pa_sp@data$pa, occ_df)
```

```{r}
#| include: false
#| eval: false
colnames(occ_df)[1] <- "pa"
```

```{r}
#| include: false
#| eval: false
occ_df <- relocate(occ_df, ID)
```

```{r}
#| include: false
#| eval: false
occ_df
```

```{r}
#| include: false
#| eval: false
cast_data <- occ_df
```

```{r}
#| include: false
#| eval: false
cast_data
```

```{r}
#| include: false
#| eval: false
pres_test <- dplyr::filter(cast_data, pa == 1)
backg_test <- dplyr::filter(cast_data, pa == 0)
```

```{r}
#| include: false
#| eval: false
testpres <- data.frame(raster::extract(bio_cr_5367, pres_test))
testbackg <- data.frame(raster::extract(bio_cr_5367, backg_test))
```

```{r}
#| include: false
#| eval: false
set.seed(10)
indices <- CreateSpacetimeFolds(cast_data, spacevar = "ID", k = 10)
```

```{r}
#| include: false
#| eval: false
myTrainingControl <- trainControl(method = "cv", 
                                  number = 10,
                                  verboseIter = TRUE,
                                  index = indices$index)
```

```{r}
#| include: false
#| eval: false
ranger_data <- dplyr::select(cast_data, 2:22)
```

```{r}
#| include: false
#| eval: false
ranger_data
```

```{r}
#| include: false
#| eval: false
set.seed(10)
model_LLO <- caret::train(cast_data[, 3:22], cast_data$pa,
                          method = "rf",
                          importance = TRUE,
                          ntree = 2000,
                          tuneGrid = data.frame(mtry = 2),
                          trControl = myTrainingControl)
```

```{r}
#| include: false
#| eval: false
model_LLO
```

```{r}
#| include: false
#| eval: false
prediction_LLO <- predict(bio_cr_5367, model_LLO)
```

```{r}
#| include: false
#| eval: false
plot(prediction_LLO)
```

```{r}
#| include: false
#| eval: false
set.seed(10)
model_ranger <- ranger(pa ~ .,
                           data = ranger_data,
                           splitrule = "hellinger",
                           probability = TRUE,
                           replace = TRUE,
                           importance = "permutation",
                           num.trees = 2000,
                           max.depth = 3)
```

```{r}
#| include: false
#| eval: false
model_ranger
```

```{r}
#| include: false
#| eval: false
prediction_ranger <- predict(bio_cr_5367, model_ranger, type='response', fun = function(model, ...) predict(model, ...)$predictions)
```

```{r}
#| include: false
#| eval: false
prediction_ranger
```

```{r}
#| include: false
#| eval: false
plot(prediction_ranger)
```

```{r}
#| include: false
#| eval: false
plot(varImp(model_LLO))
```

```{r}
#| include: false
#| eval: false
set.seed(10)
ffsmodel_LLO <- ffs(cast_data[, 3:22], cast_data$pa,
                    metric="Rsquared",
                    method = "rf",
                    tuneGrid = data.frame("mtry"=2),
                    verbose = FALSE,
                    ntree = 50,
                    trControl = myTrainingControl)
```

```{r}
#| include: false
#| eval: false
ffsmodel_LLO
```

```{r}
#| include: false
#| eval: false
ffsmodel_LLO$selectedvars
```

```{r}
#| include: false
#| eval: false
plot_ffs(ffsmodel_LLO)
```

```{r}
#| include: false
#| eval: false
prediction_ffs <- predict(bio_cr_5367, ffsmodel_LLO, type = "prob")
```

```{r}
#| include: false
#| eval: false
plot(prediction_ffs)
```

```{r}
#| include: false
#| eval: false
prediction_ffs_stars <- st_as_stars(prediction_ffs)
```

```{r}
#| include: false
#| eval: false
cr_box <- st_bbox(c(xmin = 200000, xmax = 700000, ymax = 1250000, ymin = 850000), crs = st_crs(prediction_ffs_stars))
```

```{r}
#| include: false
#| eval: false
prediction_ffs_stars <- st_crop(prediction_ffs_stars, cr_box)
```

```{r}
#| include: false
#| eval: false
g1 <- ggplot() +
  geom_stars(data = prediction_ffs_stars) +
  coord_equal() +
  theme_minimal() +
  scale_fill_viridis_c(name = "Probabilidad", option = "B", direction = -1, na.value = "transparent")
g1
```

```{r}
#| include: false
#| eval: false
AOA <- aoa(bio_cr_5367, ffsmodel_LLO)
```

```{r}
#| include: false
#| eval: false
attributes(AOA)$aoa_stats
```

```{r}
#| include: false
#| eval: false
AOA_stars <- st_as_stars(AOA$AOA)
```

```{r}
#| include: false
#| eval: false
AOA_stars <- st_crop(AOA_stars, cr_box)
```

```{r}
#| include: false
#| eval: false
AOA_stars_0 <- dplyr::filter(AOA_stars == 0) %>% droplevels()
```

```{r}
#| include: false
#| eval: false
g2 <- ggplot() +
  geom_stars(data = AOA_stars_0) +
  coord_equal() +
  theme_void() +
  scale_fill_manual(name = "Probabilidad", values = c("grey92", "blue")) +
  guides(fill=FALSE)
g2
```

```{r}
#| include: false
#| eval: false
to_cr_sf_5367
```

```{r}
#| include: false
#| eval: false
p_coords <- st_coordinates(to_cr_sf_5367)
```

```{r}
#| include: false
#| eval: false
p_coords <- as.data.frame(p_coords)
p_coords
```

```{r}
#| include: false
#| eval: false
bg_coords <- rp_df[, -3]
```

```{r}
#| include: false
#| eval: false
bg_coords
```

```{r}
#| include: false
#| eval: false
a_coords <- slice_sample(bg_coords, n = 100)
```

```{r}
#| include: false
#| eval: false
a_coords
```

```{r}
#| include: false
#| eval: false
data_max <- prepareSWD(species = "Tolomuco", p = p_coords, a = bg_coords, env = bio_cr_5367)
```

```{r}
#| include: false
#| eval: false
data_pa <- prepareSWD(species = "Tolomuco", p = p_coords, a = a_coords, env = bio_cr_5367)
```

```{r}
#| include: false
#| eval: false
swd2csv(data_pa, file_name = "data_pa.csv")
```

```{r}
#| include: false
#| eval: false
data_max
```

```{r}
#| include: false
#| eval: false
c(train_max, val_max, test_max) %<-% trainValTest(data_max, val = 0.15, test = 0.15, only_presence = TRUE, seed = 61516)
```

```{r}
#| include: false
#| eval: false
c(train_pa, val_pa, test_pa) %<-% trainValTest(data_pa, val = 0.15, test = 0.15, only_presence = FALSE, seed = 61517)
```

```{r}
#| include: false
#| eval: false
cat("# Training  : ", nrow(train@data))
cat("\n# Validation: ", nrow(val@data))
cat("\n# Testing   : ", nrow(test@data))
```

```{r}
#| include: false
#| eval: false
model <- SDMtune::train("RF", data = train_pa)
h <- list(mtry = seq(1:10))
# Call the gridSearch function
exp_1 <- gridSearch(model, hypers = h, metric = "auc", test = val_pa)
exp_1@results
```

```{r}
#| include: false
#| eval: false
getTunableArgs(model)
```

```{r}
#| include: false
#| eval: false
folds_max <- randomFolds(train_max, k = 4, only_presence = TRUE, seed = 25)
```

```{r}
#| include: false
#| eval: false
folds_pa <- randomFolds(train_pa, k = 4, only_presence = FALSE, seed = 25)
```

```{r}
#| include: false
#| eval: false
set.seed(25)
m_max <- SDMtune::train("Maxent", data = train_max, folds = folds_max)
m_rf <- SDMtune::train("RF", data = train_pa, folds = folds_pa)
m_brt <- SDMtune::train("BRT", data = train_pa, folds = folds_pa)
m_ann <- SDMtune::train("ANN", data = train_pa, size = 10, folds = folds_pa)
```

```{r}
#| include: false
#| eval: false
pred_max <- predict(m_max, data = data, type = "cloglog")
pred_rf <- predict(m_rf, data = data)
pred_brt <- predict(m_brt, data = data)
pred_ann <- predict(m_ann, data = data)
```

```{r}
#| include: false
#| eval: false
map_max <- predict(m_max, data = bio_cr_5367, type = "cloglog")
map_rf <- predict(m_rf, data = bio_cr_5367)
map_brt <- predict(m_brt, data = bio_cr_5367)
map_ann <- predict(m_ann, data = bio_cr_5367)
```

```{r}
#| include: false
#| eval: false
getTunableArgs(m_ann)
```

```{r}
#| include: false
#| eval: false
h <- list(size = 10:50, decay = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5), maxit = c(50, 100, 300, 500))
```

```{r}
#| include: false
#| eval: false
om <- optimizeModel(m_ann, hypers = h, metric = "auc", seed = 25)
```

```{r}
#| include: false
#| eval: false
best_model <- om@models[[1]]
om@results[1, ]
```

```{r}
#| include: false
#| eval: false
plot(map_max)
```

```{r}
#| include: false
#| eval: false
plot(map_rf)
```

```{r}
#| include: false
#| eval: false
plot(map_brt)
```

```{r}
#| include: false
#| eval: false
plot(map_ann)
```

```{r}
#| include: false
#| eval: false
m_metricas <- data.frame(modelo = c("Maxent", "RF", "BRT", "ANN"), AUC = c(auc(m_max, test = test), auc(m_rf, test = test), auc(m_brt, test = test), auc(m_ann, test = test)), TSS = c(tss(m_max, test = test), tss(m_rf, test = test), tss(m_brt, test = test), tss(m_ann, test = test)))
```

```{r}
#| include: false
#| eval: false
m_metricas
```

```{r}
#| include: false
#| eval: false
files <- list.files(path = file.path(system.file(package = "dismo"), "ex"), pattern = "grd", full.names = TRUE)
predictors <- raster::stack(files)
help(virtualSp)
p_coords <- virtualSp$presence
bg_coords <- virtualSp$background
```

```{r}
#| include: false
#| eval: false
data <- prepareSWD(species = "Virtual species", p = p_coords, a = bg_coords, env = predictors, categorical = "biome")
```

```{r}
#| include: false
#| eval: false
library(ENMeval)
block_folds <- get.block(occs = data@coords[data@pa == 1, ],
                         bg = data@coords[data@pa == 0, ])
model <- SDMtune::train(method = "Maxent", data = data, fc = "l", reg = 0.8, folds = block_folds)
```

```{r}
#| include: false
#| eval: false
# ENMeval
block_folds <- get.block(occs = data@coords[data@pa == 1, ],
                         bg = data@coords[data@pa == 0, ])
```

```{r}
#| include: false
#| eval: false
block_folds
```

```{r}
#| include: false
#| eval: false
model_maxent <- SDMtune::train(method = "Maxent", data = data, fc = "l", reg = 0.8, folds = block_folds)
```

```{r}
#| include: false
#| eval: false
cb_folds <- get.checkerboard1(occs = data_max@coords[data@pa == 1, ],
                              envs = bio_cr_5367,
                              bg = data_max@coords[data@pa == 0, ],
                              aggregation.factor = 4)

model_maxent <- SDMtune::train(method = "Maxent", data = data, fc = "l", reg = 0.8, folds = cb_folds)
```

```{r}
#| include: false
#| eval: false
# blockCV
sp_df <- SpatialPointsDataFrame(data_max@coords,
                                data = as.data.frame(data_max@pa),
                                proj4string = crs(bio_cr_5367))
e_folds <- envBlock(rasterLayer = bio_cr_5367,
                    speciesData = sp_df,
                    species = "data_max@pa",
                    k = 4,
                    standardization = "standard",
                    rasterBlock = FALSE,
                    numLimit = 100)
model <- SDMtune::train(method = "Maxent",
                        data = data,
                        fc = "l",
                        reg = 0.8,
                        folds = e_folds)
```

```{r}
#| include: false
#| eval: false
e_folds
```
